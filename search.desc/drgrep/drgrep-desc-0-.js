searchState.loadedDescShard("drgrep", 0, "drgrep\nThe config struct\nArgParser Module\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnhanced Glob Pattern Matcher\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMacro for printing colored text\nMacro for printing multiple colored text segments\nMacro for printing styled and colored text\nParser Module\nArgument parser\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>ArgParser</code>\nColor Configuration Module\nText Printer Module\nBlack text color\nBlue text color\nBold text style\nBright black text color (usually gray)\nBright blue text color\nBright cyan text color\nBright green text color\nBright magenta text color\nBright red text color\nBright white text color\nBright yellow text color\nCyan text color\nANSI escape sequences for terminal text formatting\nGreen text color\nMagenta text color\nRed text color\nResets all colors and styles to terminal default\nUnderline text style\nWhite text color\nYellow text color\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType alias for text parts with their associated colors\nPrints text in a specified color\nPrints multiple text segments with different colors on a …\nPrints text with both style and color\nMatches any character in the set\nComponents that make up a glob pattern.\nRepresents a compiled glob pattern for efficient matching.\nMatches a literal string\nMatches any sequence of characters (including empty)\nMatches any single character\nReturns the original pattern string.\nExpand alternatives in a pattern like {a,b} to multiple …\nFind all files in a directory that match the glob pattern.\nRecursively search for files matching the pattern.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a string matches the glob pattern.\nMatch text against components starting from a position.\nRecursive helper function to match text from a specific …\nCreates a new <code>GlobPattern</code> instance from a pattern string.\nParse a glob pattern string into components and expanded …\nParse a character class like [abc] or [!abc]\nSplit a string by commas, but respect nested braces\nModule Pattern\nSyntax error in the pattern\nResult of a match\nOther errors\nPattern element type\nErrors specific to pattern matching operations\nQuantifier types\nMain structure for pattern matching\nFinds the first match in the text\nFinds all matches in the text\nFinds a match from a specific position\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the original pattern string\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the text matches the pattern\nChecks if a character matches a pattern element\nCreates a new pattern from a pattern string\nReplaces all occurrences of the pattern with the …\nSplits the text according to the pattern\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")